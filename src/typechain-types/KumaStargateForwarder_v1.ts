/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export interface KumaStargateForwarder_v1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | 'MAX_MULTIPLIER'
      | 'MIN_MULTIPLIER'
      | 'acceptOwnership'
      | 'exchangeLayerZeroAdapter'
      | 'loadDepositGasFeeInAssetUnits'
      | 'loadEstimatedForwardedQuantityInAssetUnits'
      | 'loadWithdrawalGasFeesInAssetUnits'
      | 'lzCompose'
      | 'lzEndpoint'
      | 'minimumDepositNativeDropQuantityMultiplier'
      | 'minimumForwardQuantityMultiplier'
      | 'owner'
      | 'pendingOwner'
      | 'renounceOwnership'
      | 'setMinimumDepositNativeDropQuantityMultiplier'
      | 'setMinimumWithdrawQuantityMultiplier'
      | 'stargate'
      | 'transferOwnership'
      | 'usdc'
      | 'withdrawNativeAsset'
      | 'xchainEndpointId'
      | 'xchainOFT',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'ForwardFailed'
      | 'OwnershipTransferStarted'
      | 'OwnershipTransferred',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'MAX_MULTIPLIER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MIN_MULTIPLIER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'exchangeLayerZeroAdapter',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'loadDepositGasFeeInAssetUnits',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'loadEstimatedForwardedQuantityInAssetUnits',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'loadWithdrawalGasFeesInAssetUnits',
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzCompose',
    values: [AddressLike, BytesLike, BytesLike, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzEndpoint',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'minimumDepositNativeDropQuantityMultiplier',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'minimumForwardQuantityMultiplier',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setMinimumDepositNativeDropQuantityMultiplier',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMinimumWithdrawQuantityMultiplier',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'stargate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawNativeAsset',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'xchainEndpointId',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'xchainOFT', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'MAX_MULTIPLIER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MIN_MULTIPLIER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exchangeLayerZeroAdapter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadDepositGasFeeInAssetUnits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadEstimatedForwardedQuantityInAssetUnits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loadWithdrawalGasFeesInAssetUnits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lzCompose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lzEndpoint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'minimumDepositNativeDropQuantityMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minimumForwardQuantityMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMinimumDepositNativeDropQuantityMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMinimumWithdrawQuantityMultiplier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'stargate', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawNativeAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'xchainEndpointId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'xchainOFT', data: BytesLike): Result;
}

export namespace ForwardFailedEvent {
  export type InputTuple = [
    destinationWallet: AddressLike,
    quantity: BigNumberish,
    payload: BytesLike,
    errorData: BytesLike,
  ];
  export type OutputTuple = [
    destinationWallet: string,
    quantity: bigint,
    payload: string,
    errorData: string,
  ];
  export interface OutputObject {
    destinationWallet: string;
    quantity: bigint;
    payload: string;
    errorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KumaStargateForwarder_v1 extends BaseContract {
  connect(runner?: ContractRunner | null): KumaStargateForwarder_v1;
  waitForDeployment(): Promise<this>;

  interface: KumaStargateForwarder_v1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  MAX_MULTIPLIER: TypedContractMethod<[], [bigint], 'view'>;

  MIN_MULTIPLIER: TypedContractMethod<[], [bigint], 'view'>;

  acceptOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  exchangeLayerZeroAdapter: TypedContractMethod<[], [string], 'view'>;

  loadDepositGasFeeInAssetUnits: TypedContractMethod<[], [bigint], 'view'>;

  loadEstimatedForwardedQuantityInAssetUnits: TypedContractMethod<
    [destinationEndpointId: BigNumberish, quantity: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        estimatedForwardedQuantityInAssetUnits: bigint;
        minimumForwardedQuantityInAssetUnits: bigint;
        poolDecimals: bigint;
      },
    ],
    'view'
  >;

  loadWithdrawalGasFeesInAssetUnits: TypedContractMethod<
    [destinationEndpointIds: BigNumberish[]],
    [bigint[]],
    'view'
  >;

  lzCompose: TypedContractMethod<
    [
      _from: AddressLike,
      arg1: BytesLike,
      _message: BytesLike,
      arg3: AddressLike,
      arg4: BytesLike,
    ],
    [void],
    'payable'
  >;

  lzEndpoint: TypedContractMethod<[], [string], 'view'>;

  minimumDepositNativeDropQuantityMultiplier: TypedContractMethod<
    [],
    [bigint],
    'view'
  >;

  minimumForwardQuantityMultiplier: TypedContractMethod<[], [bigint], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pendingOwner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  setMinimumDepositNativeDropQuantityMultiplier: TypedContractMethod<
    [newMinimumDepositNativeDropQuantityMultiplier: BigNumberish],
    [void],
    'nonpayable'
  >;

  setMinimumWithdrawQuantityMultiplier: TypedContractMethod<
    [newMinimumForwardQuantityMultiplier: BigNumberish],
    [void],
    'nonpayable'
  >;

  stargate: TypedContractMethod<[], [string], 'view'>;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  usdc: TypedContractMethod<[], [string], 'view'>;

  withdrawNativeAsset: TypedContractMethod<
    [destinationWallet: AddressLike, quantity: BigNumberish],
    [void],
    'nonpayable'
  >;

  xchainEndpointId: TypedContractMethod<[], [bigint], 'view'>;

  xchainOFT: TypedContractMethod<[], [string], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'MAX_MULTIPLIER',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'MIN_MULTIPLIER',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'acceptOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'exchangeLayerZeroAdapter',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'loadDepositGasFeeInAssetUnits',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'loadEstimatedForwardedQuantityInAssetUnits',
  ): TypedContractMethod<
    [destinationEndpointId: BigNumberish, quantity: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        estimatedForwardedQuantityInAssetUnits: bigint;
        minimumForwardedQuantityInAssetUnits: bigint;
        poolDecimals: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'loadWithdrawalGasFeesInAssetUnits',
  ): TypedContractMethod<
    [destinationEndpointIds: BigNumberish[]],
    [bigint[]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'lzCompose',
  ): TypedContractMethod<
    [
      _from: AddressLike,
      arg1: BytesLike,
      _message: BytesLike,
      arg3: AddressLike,
      arg4: BytesLike,
    ],
    [void],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'lzEndpoint',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'minimumDepositNativeDropQuantityMultiplier',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'minimumForwardQuantityMultiplier',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'owner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pendingOwner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setMinimumDepositNativeDropQuantityMultiplier',
  ): TypedContractMethod<
    [newMinimumDepositNativeDropQuantityMultiplier: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setMinimumWithdrawQuantityMultiplier',
  ): TypedContractMethod<
    [newMinimumForwardQuantityMultiplier: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'stargate',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'usdc',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'withdrawNativeAsset',
  ): TypedContractMethod<
    [destinationWallet: AddressLike, quantity: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'xchainEndpointId',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'xchainOFT',
  ): TypedContractMethod<[], [string], 'view'>;

  getEvent(
    key: 'ForwardFailed',
  ): TypedContractEvent<
    ForwardFailedEvent.InputTuple,
    ForwardFailedEvent.OutputTuple,
    ForwardFailedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferStarted',
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    'ForwardFailed(address,uint256,bytes,bytes)': TypedContractEvent<
      ForwardFailedEvent.InputTuple,
      ForwardFailedEvent.OutputTuple,
      ForwardFailedEvent.OutputObject
    >;
    ForwardFailed: TypedContractEvent<
      ForwardFailedEvent.InputTuple,
      ForwardFailedEvent.OutputTuple,
      ForwardFailedEvent.OutputObject
    >;

    'OwnershipTransferStarted(address,address)': TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
